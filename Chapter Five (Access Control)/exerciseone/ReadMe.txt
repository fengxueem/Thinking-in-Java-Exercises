Since we indicate these classes (A and ExerciseOne) are under the same package (exerciseone), we need to tell the compiler and JVM where to find this package! The reason is:
Normally, the official packages like java.lang are known to the compiler and JVM, so just using the import statements inside the ".java" file should work. But, can you guess that does JVM know where to find our homemade packages? The answer is obvious. He doesn't know about it! So, we must tell him where to find our own packages. By how? Two methods are recommended. Please open the bash first and enter the commands below. Shortkey in linux: ctrl + alt + t.
Method One:
1. cd XXXXXX/exerciseone    -> this command will lead the bash to the exerciseone folder where the source files (A.java, ExerciseOne.java) are located. The 'XXXXXX/' here is based on your computer. You need to replace it with the location path where you put exerciseone folder.
2. javac -d ./ *.java    -> this command will automatically compile all the '.java' files inside current working directory of bash. In out case, it will compile A.java, ExerciseOne.java. And, by adding '-d', it also does an amazing thing for us. It looks up the package defined in our '.java' file. And, it puts '.class' files according to the package structure! Remeber to checkout your exersiceone folder after this statement is finished and you will see what I mean.
3. java exerciseone.ExerciseOne    -> Normally, we run a java program just typing 'java XXXX'. This time, since the class files are all put according to the package definition, we need to run our program also by the package definition. So, we write the package name and an extra dot before the class name. By doing this, we are telling the JVM where to look up our '.class' file!
Method Two:
1. cd XXXXXX/exerciseone    -> same thing as the method one.
2. javac -cp XXXXXX/ *.java    -> By '-cp XXXXXX/', we tell the compiler that if you want to compile my '.java' file successfully, please find the java files under the XXXXXX/ folder and with the help of package definition. Then, the compiler knows that he needs to find the package exerciseone as we indicate in the '.java' file and this package is under the XXXXXX/ folder. Remeber to checkout your exersiceone folder after this statement is finished. This time, you will see the '.class' files are put in the same folder as '.java' files.
3. cd ../     -> go back to the XXXXXX/ folder. '../' is a trick or short way to represent the up level folder. Why should we let the bash go to XXXXXX/ folder? Because the only way that we can run our '.class' through 'java' command is that we call both the package name and the class name(java exerciseone.ExerciseOne). So, if we still in the exerciseone folder, there is no more folder named exerciseone under it, which means the JVM cannot find the package and he will return an error!
4. java exerciseone.ExerciseOne     -> the same thing as method one.