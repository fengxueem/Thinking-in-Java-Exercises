First of all, you may think that it's odd to have a readme for such a simple question. But, believe it or not, it's very necessary. And, let's get to the points now.
1. According to the source file(AtUnit.java) at textbook page 1097, inside process(File cFile) method there is a if statement wrapped by try block at line 34-35, which forbids a unpackaged class of being processed. Although I don't think it's important to throw away the unpackaged classes, YOU HAVE TO PUT YOUR CLASS INTO SOME PACKAGE FOR ANNOTATION PROCESSING!!!
2. The second point may seems to be irrelavent until you read the third point. How to compile and run a packaged java source file? Go back to chapter 5 and see the readme file of EXERCISE ONE. Note that a ".class" file created by a packaged ".java" file should be stored under a directory whose name is the same as the package name!
3. According to the source file(AtUnit.java) at textbook page 1097 at line 32-33, the class name is stored as a string named "cName". This cName is got from the ".class" file by ClassNameFinder.thisClass(). However, the parameter of AtUnit.process() method, cFile which represents the ".class" in disk, generated by ProcessFiles.start() cannot find a packaged class file properly. Based on the second point, a packaged class file is normally stored under a directory whose name is the same as the package name. But, if you look up the code in ProcessFiles.start(), you will find out that it only opens a file under the current working directory at line 28-29(net/mindview/util/ProcessFiles.java). Thus, if your working directory is not the directory you put the ".class" file, then " String cName = ClassNameFinder.thisClass(BinaryFile.read(cFile))" will throw a FILE NOT FOUND exception! So, in order to solve this awkward problem, you need to copy and paste the ".class" file into the same directory of your ".java" file, which is not the general case as you can see from the second point. Finally, you will have two ".class" file, one that JVM runs and one for the " String cName = ClassNameFinder.thisClass(BinaryFile.read(cFile))".
4. Thanks for takeing time to read. I guess this readme should save you some time when you are trying to find what's about this exercise 4.
